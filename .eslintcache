[{"C:\\Users\\Usuario\\Documents\\FEDE\\Elementos Programación\\Organicer\\organicer\\src\\index.js":"1","C:\\Users\\Usuario\\Documents\\FEDE\\Elementos Programación\\Organicer\\organicer\\src\\calendar\\Calendar.js":"2"},{"size":254,"mtime":1614132230264,"results":"3","hashOfConfig":"4"},{"size":9777,"mtime":1614048904936,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vfqy5",{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"C:\\Users\\Usuario\\Documents\\FEDE\\Elementos Programación\\Organicer\\organicer\\src\\index.js",[],"C:\\Users\\Usuario\\Documents\\FEDE\\Elementos Programación\\Organicer\\organicer\\src\\calendar\\Calendar.js",["12","13","14","15","16"],"import React, {useState, useEffect} from \"react\"\r\nimport moment from \"moment\";\r\nimport \"./calendar.css\";\r\n\r\nconst Calendar = () => {\r\n  const weekdayshort = moment.weekdaysShort();\r\n  const [dateObject, setDateObject] = useState(moment());\r\n  const [allMonths, setAllMonths] = useState(moment.months());\r\n  const [selectedDay, setSelectedDay] = useState(0)\r\n  const [showDateTable, setShowDateTable] = useState(true)\r\n  const [showMonthTable, setShowMonthTable] = useState(false)\r\n  const [showYearTable, setShowYearTable] = useState(false)\r\n  \r\n  let year = () => { \r\n    return dateObject.format('Y')\r\n  }\r\n\r\n  const daysInMonth = () => {\r\n    return dateObject.daysInMonth();\r\n  };\r\n\r\n\r\n  const firstDayOfMonth = () => {\r\n    let firstDay = moment(dateObject)\r\n      .startOf(\"month\")\r\n      .format(\"d\"); \r\n    return firstDay;\r\n  };\r\n\r\n    let weekdayshortname = weekdayshort.map(day => {\r\n      return <th className=\"\"key={day}>{day}</th>;\r\n    });\r\n\r\n    let blanks = [];\r\n    for (let i = 0; i < firstDayOfMonth(); i++) {\r\n      blanks.push(<td className=\"calendar-day empty\">{\"\"}</td>);\r\n    }\r\n\r\n    const onDayClick = (e, d) => {\r\n      setSelectedDay(d)\r\n    }\r\n\r\n    //HIGHLIGHT THE CURRENT DAY\r\n    //1) Find the current day\r\n    const currentDay = () => { return dateObject.format('D') }\r\n    //2) Add a condition in the loop that creates <td> to change this tag to other style\r\n    let daysInMonthTD = [];\r\n    for (let d = 1; d <= daysInMonth(); d++) {\r\n      let currentDayVar = d === currentDay() ? \"today\" : \"\"; \r\n      daysInMonthTD.push(\r\n        <td key={d} className={`calendar-day ${currentDayVar}`}>\r\n          <span\r\n            onClick={e => onDayClick(e, d)}>\r\n            {d}\r\n          </span>\r\n        </td>\r\n      );\r\n    }\r\n    var totalSlots = [...blanks, ...daysInMonthTD];\r\n    let rows = [];\r\n    let cells = [];\r\n\r\n    totalSlots.forEach((row, i) => {\r\n      if (i % 7 !== 0) {\r\n        cells.push(row);\r\n      } else {\r\n        rows.push(cells);\r\n        cells = [];\r\n        cells.push(row);\r\n      }\r\n      if (i === totalSlots.length - 1) {\r\n        rows.push(cells);\r\n      }\r\n    });\r\n\r\n    let daysinmonth = rows.map((d, i) => {\r\n      return <tr>{d}</tr>;\r\n    });\r\n\r\n    //CREATE A MONTH PICKER\r\n    //1) Function that return the month from de dateObject state\r\n    let month = () => ( dateObject.format(\"MMMM\") )\r\n    //2)Create the XML structure,styles it; and display the result of the funciton in it\r\n\r\n    //Changing the Month\r\n    //11)Create a function to change the month\r\n    const setMonth = (month) => {\r\n      const monthNumber = allMonths.indexOf(month) //Get the index \"number\" of the month clicked\r\n      let copyDateObject = Object.assign({}, dateObject); //Copy the dateObject of the state\r\n      copyDateObject = moment(copyDateObject).set(\"month\", monthNumber); //Moment take this object and change \r\n                                                                         // the \"month\" property                                                                                                                                 \r\n      setDateObject(copyDateObject) //Change the state with the new value of the month\r\n      setShowMonthTable(!showMonthTable);\r\n      setShowDateTable(!showDateTable);\r\n    }\r\n\r\n    const MonthList = ({data}) => {\r\n    //3)Save the moment object in the state, and store all months\r\n    //4)Function to handle the month <table>\r\n      //4.1) Array to store the <td>´s that the function will create\r\n      //4.2) Loop throw \"allMonths\" to create a <td> for each one and store it in the array\r\n    let months = [];\r\n    \r\n    //12)Add the onClick to the <td>\r\n      data.map( (month) => {\r\n        months.push(\r\n          <td \r\n            key={month}\r\n            className=\"calendar-month\"\r\n            onClick={ e => setMonth(month)}>\r\n            <span>{month}</span>\r\n          </td>\r\n        )\r\n      })\r\n    //5)Create a list of cells that contains the month name\r\n      let cells = [];\r\n    //6)Define rows to store <td> while going throw rows\r\n      let rows = [];\r\n    //7)Loop throw each item of months, finally we get an array \"rows\", with \"row\" inside and \"cells\" inside it.\r\n      months.forEach( (row, i) => {\r\n        if( i % 3 !== 0 || i === 0){\r\n          cells.push(row)\r\n        } else{\r\n          rows.push(cells)\r\n          cells = []\r\n          cells.push(row)\r\n        } \r\n      });\r\n      rows.push(cells)\r\n    //8)Loop throw rows and create a <tr> for each one \"rows in the screen\"\r\n      let monthListTR = () => {\r\n        return rows.map( (row, i) => <tr key={i}>{row}</tr>)\r\n      }\r\n\r\n    //9)Create HTML structure with all styles that \"MonthList\" function will return\r\n      return (\r\n        <table className=\"calendar-month\">\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"4\">Select Month</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{monthListTR()}</tbody>\r\n        </table>\r\n      )\r\n    //10)Render the function in the parent component \"Calendar\"    \r\n    }\r\n\r\n\r\n    \r\n    const showMonth = () => {\r\n      if(showYearTable === true){\r\n        setShowYearTable(false)\r\n          if(showDateTable === true){\r\n            setShowDateTable(!showDateTable)\r\n          }\r\n      }else{\r\n        if(showMonthTable === false){\r\n          setShowDateTable(!showDateTable)\r\n          console.log(\"showMonthTable is FALSE\", showDateTable)\r\n          setShowMonthTable(true)\r\n        }\r\n        else if(showMonthTable === true)\r\n          setShowMonthTable(false)\r\n          setShowDateTable(true)\r\n        } \r\n    }\r\n\r\n    const setYear = (year) => {\r\n      let copyDateObject = Object.assign({}, dateObject);\r\n      copyDateObject = moment(copyDateObject).set(\"year\", year)\r\n      setDateObject(copyDateObject);\r\n      setShowYearTable(!showYearTable);\r\n      setShowMonthTable(!showDateTable);\r\n    }\r\n\r\n    let getDates = (startDate, stopDate) => {\r\n      let dateArray = [];\r\n      let currentDate = moment(startDate);\r\n      let stopingDate = moment(stopDate);\r\n      while (currentDate < stopingDate) {\r\n        dateArray.push(moment(currentDate).format('YYYY'))\r\n        currentDate = moment(currentDate).add(1, \"year\")\r\n      }\r\n      return dateArray\r\n    }\r\n\r\n\r\n    const YearTable = (props) => {\r\n      let years = []\r\n      let nextten = moment()  //Crear instancia del objeto moment\r\n                    .set('year', props) //Devolveme el año actual\r\n                    .add('year', 12) //Devolveme los 12 años proximos\r\n                    .format('Y');  //En el formato '2021'\r\n\r\n      let twelveyears = getDates(props, nextten);\r\n\r\n      twelveyears.map( (data) => {\r\n        years.push(\r\n          <td\r\n            key={data}\r\n            className=\"calendar-month\"\r\n            onClick={e => setYear(data)}>\r\n            <span>{data}</span>\r\n          </td>\r\n        )\r\n      })\r\n\r\n      let rows = [];\r\n      let cells = [];\r\n\r\n      years.forEach( (row, i) => {\r\n        if( i % 3 !== 0 || i === 0){\r\n          cells.push(row);\r\n        }else {\r\n          rows.push(cells);\r\n          cells = [];\r\n          cells.push(row)\r\n        }\r\n      });\r\n      rows.push(cells)\r\n\r\n      let yearListTR = rows.map((row, i) => (<tr key={i}>{row}</tr>));\r\n\r\n      return (\r\n        <table className=\"calendar-month\">\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"4\">Select Year</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{yearListTR}</tbody>\r\n        </table>\r\n      )\r\n    }\r\n\r\n    const handleShowYearTable = (e) => {\r\n      if(showMonthTable === true){\r\n        setShowYearTable(false)\r\n      }else if(showDateTable === true){\r\n        setShowDateTable(false)\r\n      }\r\n        setShowYearTable(true)\r\n    }\r\n\r\n    let onNext = () => {\r\n      let copyDateObject = Object.assign({}, dateObject);\r\n      let currentView = \"\";\r\n      if(showYearTable === true){\r\n        currentView = \"year\"\r\n      }else if(showMonthTable === true){\r\n        currentView = \"month\"\r\n      }\r\n      copyDateObject = moment(copyDateObject).add(1, currentView)\r\n      setDateObject(copyDateObject)\r\n    }\r\n\r\n    let onPrev = () => {\r\n      let copyDateObject = Object.assign({}, dateObject);\r\n      let currentView = \"\";\r\n      if(showYearTable === true){\r\n        currentView = \"year\"\r\n      }else if(showMonthTable === true){\r\n        currentView = \"month\"\r\n      }\r\n      copyDateObject = moment(copyDateObject).subtract(1, currentView)\r\n      setDateObject(copyDateObject)\r\n    }\r\n\r\n    return (  \r\n      <div className=\"tail-datetime-calendar\">\r\n          <div className=\"calendar-navi\">\r\n          <span \r\n              className=\"calendar-button button-prev\"\r\n              onClick={e => onPrev()}></span>\r\n            <span \r\n              data-tail-navi=\"switch\" \r\n              className=\"calendar-label\"\r\n              onClick={ e => {showMonth()} }>\r\n              {month()}\r\n            </span>\r\n            <span \r\n              className=\"calendar-label\"\r\n              onClick={e => handleShowYearTable()}>\r\n              {year()}\r\n            </span>\r\n            <span \r\n              className=\"calendar-button button-next\"\r\n              onClick={e => {onNext()}}></span>  \r\n          </div>\r\n          <div className=\"calendar-date\">\r\n            {showYearTable && <YearTable props={year()}/>}\r\n            {showMonthTable && (<MonthList data={moment.months()}/>)}\r\n          </div>\r\n         { showDateTable && (\r\n            <div className=\"calendar-date\">\r\n              <table className=\"calendar-day\">\r\n                <thead>\r\n                  <tr>{weekdayshortname}</tr>\r\n                </thead>\r\n                <tbody>{daysinmonth}</tbody>\r\n              </table>\r\n            </div>\r\n         )}\r\n      </div>    \r\n     \r\n    );\r\n} \r\n\r\nexport default Calendar",["17","18"],{"ruleId":"19","severity":1,"message":"20","line":1,"column":26,"nodeType":"21","messageId":"22","endLine":1,"endColumn":35},{"ruleId":"19","severity":1,"message":"23","line":8,"column":21,"nodeType":"21","messageId":"22","endLine":8,"endColumn":33},{"ruleId":"19","severity":1,"message":"24","line":9,"column":10,"nodeType":"21","messageId":"22","endLine":9,"endColumn":21},{"ruleId":"25","severity":1,"message":"26","line":105,"column":25,"nodeType":"27","messageId":"28","endLine":105,"endColumn":27},{"ruleId":"25","severity":1,"message":"26","line":198,"column":31,"nodeType":"27","messageId":"28","endLine":198,"endColumn":33},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setAllMonths' is assigned a value but never used.","'selectedDay' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-global-assign","no-unsafe-negation"]